#!/usr/bin/php -q
<?php
$config = parse_amportal_conf( "/etc/amportal.conf" );

require_once "phpagi.php";
require_once "phpagi-asmanager.php";
require_once "sql.php";

$AGI = new AGI();
$db = new AGIDB($AGI);
$script_dir = "/var/www/html/admin/modules/saymyname/assets";

debug("SayMyName AGI Started", 1);
debug("Credential: $script_dir/config.json");
putenv("GOOGLE_APPLICATION_CREDENTIALS=$script_dir/config.json"); 

$text_it = $argv[1];
$textnotfound_it = $argv[2];

$text_en = $argv[3];
$textnotfound_en = $argv[4];

$silence_t = $argv[5];
$drop_t = $argv[6];
$fade_t = $argv[7];

$moh = $argv[8];

$engine = $argv[9];
$enginebin = $argv[10];
// $engine = 'googletts';
// $enginebin = '/usr/bin/node';

$tts_lang = 'IT';

/** Database **/
$callerid = $AGI->request['agi_callerid'];
debug("Number: $callerid", 1);

if(substr( $callerid, 0, 2 ) === "00" || substr( $callerid, 0, 1 ) === "+"){
	if((substr( $callerid, 0, 2 ) === "00" && substr( $callerid, 2, 4 ) === "39") || 
			(substr( $callerid, 0, 1 ) === "+" && substr( $callerid, 1, 3 ) === "39"))
		$tts_lang = 'IT';
	else
		$tts_lang = 'EN';
}

$text = "";

if($tts_lang === 'IT'){
	$text = $text_it;
	$textnotfound = $textnotfound_it;
} else {
	$text = $text_en;
	$textnotfound = $textnotfound_en;
}

$sql = "select `fname`,`lname` FROM contactmanager_entry_numbers INNER JOIN contactmanager_group_entries ON entryid=contactmanager_group_entries.id where `number` = '{$callerid}';";
$row = $db->sql($sql,'ASSOC');
debug( "Number in contact manager with this number: " . $db->numrows);


if ($db->numrows > 0) {
        $text = str_replace("%n", $row[0]["fname"], $text);
        $text = str_replace("%s", $row[0]["lname"], $text);
} else {
	$text = $textnotfound;
}

$hash = md5($text.$silence_t.$drop_t.$fade_t.$moh.$engine);
debug("Text: $text", 1);

$f = $AGI->get_full_variable('${CHANNEL(audionativeformat)}');
$nformat = $f['data'];
$format = array(
	"ext" => "sln",
	"rate" => "8000"
);

//amazing work my friend: https://github.com/stevenmirabito/asterisk-picotts/blob/master/picotts.agi#L251
switch(true) {
	case preg_match('/(silk|sln)12/',$nformat):
		$format = array(
			"ext" => "sln12",
			"rate" => "12000"
		);
	break;
	case preg_match('/(speex|slin|silk)16|g722|siren7/',$nformat):
		$format = array(
			"ext" => "sln16",
			"rate" => "16000"
		);
	break;
	case preg_match('/(speex|slin|celt)32|siren14/',$nformat):
		$format = array(
			"ext" => "sln32",
			"rate" => "32000"
		);
	break;
	case preg_match('/(celt|slin)44/',$nformat):
		$format = array(
			"ext" => "sln44",
			"rate" => "44000"
		);
	break;
	case preg_match('/(celt|slin)48/',$nformat):
		$format = array(
			"ext" => "sln48",
			"rate" => "48000"
		);
	break;
	default;
		$format = array(
			"ext" => "sln",
			"rate" => "8000"
		);
	break;
}

if (!isset($text))
{
	return 0;
}

if ( $retval != 0 ) {
	debug("ERROR: TTS engine binary not found.", 1);
	return $retval;
}

$soundsdir = $config["ASTVARLIBDIR"]."/sounds/ttsng";
if( !is_dir($soundsdir) ) mkdir($soundsdir, 0775);

$wavefile = $soundsdir."/$engine-tts-$hash.".$format['ext'];
$tmpwavefile = $soundsdir."/$engine-tts-$hash.wav";
$tmpwavefile_mixed = $soundsdir."/$engine-tts-$hash"."_mixed.wav";
debug("Generated WAV file: $wavefile", 3);
$textfile = $soundsdir."/$engine-tts-$hash.txt";
debug("TXT file: $textfile", 3);

$soundfile = $moh? $soundsdir."/BGSound.wav" : null;

if ( !file_exists($wavefile) ) {
	debug("Text to speech wave file doesnt exist, lets create it.", 1);
	if ( false === ($fh = fopen($textfile, "w")) ) {
		debug("ERROR: Cannot open the file: $textfile", 1);
		return 1;
	}
	if ( false === fwrite($fh, $text) ) {
		debug("ERROR: Cannot write to file: $textfile", 1);
		return 1;
	}
	fclose($fh);
	debug("Executing $engine", 1);

	switch ($engine) {
		case 'googletts':
			debug($enginebin." $script_dir/main.js --mp3=/var/lib/asterisk/sounds/ttsng/$engine-tts-$hash.mp3 --text='$text' --wav=/var/lib/asterisk/sounds/ttsng/$engine-tts-$hash --lang='$tts_lang'");
			exec($enginebin." $script_dir/main.js --mp3=/var/lib/asterisk/sounds/ttsng/$engine-tts-$hash.mp3 --text='$text' --wav=/var/lib/asterisk/sounds/ttsng/$engine-tts-$hash --lang='$tts_lang'");
			break;
        default:
			debug("$engine is not a valid engine!", 1);
		break;
	}}
if(file_exists($tmpwavefile)) {
	// $soundfile = $moh != null ? $moh : $soundfile;
	if($soundfile != null) {
		exec("$script_dir/mix.sh $silence_t $tmpwavefile $soundfile $drop_t $fade_t $tmpwavefile_mixed && sox $tmpwavefile_mixed -q -r ".$format['rate']." -c1 -t raw $wavefile");
		debug("$script_dir/mix.sh $silence_t $tmpwavefile $soundfile $drop_t $fade_t $tmpwavefile_mixed && sox $tmpwavefile_mixed -q -r ".$format['rate']." -c1 -t raw $wavefile");	
		unlink($tmpwavefile_mixed);
	} else {
		exec("sox $tmpwavefile -q -r ".$format['rate']." -c1 -t raw $wavefile");
		debug("sox $tmpwavefile -q -r ".$format['rate']." -c1 -t raw $wavefile");	
	}
	unlink($tmpwavefile);
	
}

if(file_exists($wavefile)) {
	$AGI->wait_for_digit(1000);
	debug("Streaming the generated wave.", 1);
	$AGI->stream_file("ttsng/".basename($wavefile,".".$format['ext']),'#');
} else {
	debug("File was not created!", 1);
}
debug("SayMyName AGI end", 1);

function parse_amportal_conf($filename) {
	$file = file($filename);
	$matches = array();
	$matchpattern = '/^\s*([a-zA-Z0-9]+)\s*=\s*(.*)\s*([;#].*)?/';
	foreach ($file as $line) {
		if (preg_match($matchpattern, $line, $matches)) {
			$conf[ $matches[1] ] = $matches[2];
		}
	}
	return $conf;
}

function debug($string, $level=3) {
	global $AGI;
	$AGI->verbose($string, $level);
}